global proc
AEhoudiniAssetTemplate_fileAttributeBrowse(string $plug)
{
    string $fileDialogResults[] = `fileDialog2
        -caption $plug
        -fileMode 4
        -okCaption "Select"`;
    if(size($fileDialogResults))
    {
        setAttr -type "string"
            $plug
            $fileDialogResults[0];
    }
}

global proc
AEhoudiniAssetTemplate_textEdit(string $plug)
{
    string $window = stringArrayToString(
            stringToStringArray(
                "houdiniEngine_textEdit_" + $plug,
                "|."
                ),
            "_");

    if(`window -exists $window`)
    {
        showWindow $window;
        return;
    }

    window
        -title $plug
        $window;

    string $mainLayout = `formLayout`;

    string $descriptionText = `text
        -label ("Editing: " + $plug)
        -align "left"`;

    string $currentText = `getAttr $plug`;
    string $scrollField = `scrollField
        -text $currentText`;

    scrollField -e
        -enterCommand ("setAttr -type \"string\" " + $plug + " "
                + "`scrollField -q -text " + $scrollField + "`")
        $scrollField;

    string $buttonLayout = `formLayout`;

    button
        -label "Apply"
        -command ("setAttr -type \"string\" " + $plug + " "
                + "`scrollField -q -text " + $scrollField + "`")
        applyButton;
    button
        -label "Cancel"
        -command ("evalDeferred \"deleteUI " + $window + "\"")
        cancelButton;

    setParent ..;

    formLayout -e
        -attachNone applyButton "top"
        -attachForm applyButton "left" 5
        -attachForm applyButton "bottom" 5
        -attachPosition applyButton "right" 1 50

        -attachNone cancelButton "top"
        -attachPosition cancelButton "left" 1 50
        -attachForm cancelButton "bottom" 5
        -attachForm cancelButton "right" 5

        $buttonLayout;

    setParent ..;

    formLayout -e
        -attachForm $descriptionText "top" 5
        -attachForm $descriptionText "left" 5
        -attachForm $descriptionText "right" 5

        -attachControl $scrollField "top" 5 $descriptionText
        -attachForm $scrollField "left" 5
        -attachControl $scrollField "bottom" 5 $buttonLayout
        -attachForm $scrollField "right" 5

        -attachForm $buttonLayout "left" 5
        -attachForm $buttonLayout "bottom" 5
        -attachForm $buttonLayout "right" 5
        $mainLayout;

    showWindow $window;
}

proc buildAttrTree(string $nodeName, string $attr, string $fullAttr)
{
    string $fullAttrName = $nodeName + "." + $fullAttr;

    // Using for-in loop with the attributeQuery result directly crashes Maya.
    // This is most likely a MEL bug. Workaround it by first storing the result
    // into a string array.
    //for($child in `attributeQuery
    //    -node $nodeName
    //    -listChildren $attr`)
    string $children[] = `attributeQuery -node $nodeName -listChildren $attr`;
    for($child in $children)
    {
        int $isFolder = endsWith($child, "__folder");

        string $type = `getAttr -type ($fullAttrName + "." + $child)`;
        int $isCompound = ($type == "TdataCompound");
        int $isMulti = `attributeQuery -node $nodeName -multi $child`;

        string $multiparm_suffix = "__multiSize";
        int $isMultiSize = endsWith($child, $multiparm_suffix);

        int $isSimpleAttribute = `attrControlGrp -q -handlesAttribute ($fullAttrName + "." + $child)`
            && !$isMultiSize
            // We need to make sure this is not a folder. There could be
            // folders that look like a float3 attribute, and -handlesAttribute
            // will return true.
            && !$isFolder;

        // separator
        if($type == ""
                && `attributeQuery -node $nodeName -niceName $child` == "Separator")
        {
            separator;
        }
        else if(endsWith($child, "__button"))
        {
            string $niceName = `attributeQuery -node $nodeName -niceName $child`;
            button -label $niceName -command ("setAttr " + $fullAttrName + "." + $child + " 1");
        }
        // simple attributes
        else if($isSimpleAttribute)
        {
            if($type == "string"
                    && `addAttr -q -usedAsFilename ($fullAttrName + "." + $child)`)
            {
                string $niceName = `attributeQuery -node $nodeName -niceName $child`;
                string $text = `getAttr ($fullAttrName + "." + $child)`;

                string $textField = `textFieldButtonGrp
                    -label $niceName
                    -buttonLabel "..."
                    -text $text`;

                scriptJob
                    -parent $textField
                    -attributeChange ($fullAttrName + "." + $child)
                    ("textFieldButtonGrp -e -text `getAttr " + $fullAttrName + "." + $child + "`"
                     + " \"" + $textField + "\"");
                textFieldButtonGrp -e
                    -changeCommand ("setAttr -type \"string\""
                            + " \"" + $fullAttrName + "." + $child + "\""
                            + " `textFieldButtonGrp -q -text " + $textField + "`")
                    -buttonCommand ("AEhoudiniAssetTemplate_fileAttributeBrowse "
                            + "\"" + ($fullAttrName + "." + $child) + "\"")
                    $textField;
            }
            else if($type == "string")
            {
                string $niceName = `attributeQuery -node $nodeName -niceName $child`;
                string $text = `getAttr ($fullAttrName + "." + $child)`;

                string $textField = `textFieldButtonGrp
                    -label $niceName
                    -buttonLabel "Edit"
                    -text $text`;

                scriptJob
                    -parent $textField
                    -attributeChange ($fullAttrName + "." + $child)
                    ("textFieldButtonGrp -e -text `getAttr " + $fullAttrName + "." + $child + "`"
                     + " \"" + $textField + "\"");
                textFieldButtonGrp -e
                    -changeCommand ("setAttr -type \"string\""
                            + " \"" + $fullAttrName + "." + $child + "\""
                            + " `textFieldButtonGrp -q -text " + $textField + "`")
                    -buttonCommand ("AEhoudiniAssetTemplate_textEdit "
                            + "\"" + $fullAttrName + "." + $child + "\"")
                    $textField;
            }
            else
            {
                attrControlGrp -attribute ($fullAttrName + "." + $child);
            }
        }
        // a folder is represented by a compound attribute
        else if($isCompound && !$isMulti)
        {
            string $niceName = `attributeQuery -node $nodeName -niceName $child`;

            frameLayout
                -collapsable true
                -collapse false
                -label $niceName;
            columnLayout
                -adjustableColumn true;

            buildAttrTree($nodeName, $child, $fullAttr + "." + $child);

            setParent ..;
            setParent ..;
        }
        // a multiparm is represented by a "multiSize" attribute and a multi compound attribute
        else if($isCompound && $isMulti)
        {
            // the actual UI for the multiparm attribute is generated when checking "multiSize"
        }
        else if($isMultiSize)
        {
            string $multiAttr = substring($child, 1, size($child) - size($multiparm_suffix));
            string $multiFullAttr = $fullAttr + "." + $multiAttr;

            string $multiNiceName = `attributeQuery -node $nodeName -niceName $child`;

            frameLayout
                -collapsable true
                -label $multiNiceName;
            columnLayout
                -adjustableColumn true;

            string $parent = `setParent -q`;

            // attributeEditorTemplate messes up layout, so pop out of it temporarily
            setUITemplate -popTemplate;

            rowLayout
                -numberOfColumns 3;

            attrControlGrp
                -attribute ($fullAttrName + "." + $child)
                // Forcing evaluation here ensures the element attribute is
                // created before houdiniAssetAdjustMulti() is executed. This
                // prevents the UI from a completel rebuild when
                // houdiniAssetAdjustMulti() accesses the new element.
                -changeCommand ("dgeval " + $nodeName + ".output; houdiniAssetAdjustMulti \\\"" + $parent + "\\\" \\\"" + $nodeName + "\\\" \\\"" + $multiAttr + "\\\" \\\"" + $multiFullAttr + "\\\"");
            ;

            button
                -label "+"
                -width 30
                -command ("setAttr " + $fullAttrName + "." + $child
                        + " (`getAttr " + $fullAttrName + "." + $child + "` + 1)");
            button
                -label "-"
                -width 30
                -command ("setAttr " + $fullAttrName + "." + $child
                        + " (`getAttr " + $fullAttrName + "." + $child + "` - 1)");

            setParent ..;

            setUITemplate -pushTemplate attributeEditorTemplate;

            houdiniAssetAdjustMulti($parent, $nodeName, $multiAttr, $multiFullAttr);

            setParent ..;
            setParent ..;
        }
        else
        {
            buildAttrTree($nodeName, $child, $fullAttr + "." + $child);
        }
    }
}

proc createAttrCheckBox(string $checkBox, string $label, string $annotation)
{
    checkBox
        -label $label
        -annotation $annotation
        $checkBox;
}

proc replaceAttrCheckBox(string $checkBox, string $plug, string $changeCommand)
{
    checkBox -e
        -value `getAttr $plug`
        $checkBox;

    // stopping playback will trigger the attributeChange scriptJob, so don't
    // add the changeCommand to the scriptJob
    scriptJob
        -parent $checkBox
        -replacePrevious
        -attributeChange $plug
        ("checkBox -e -value `getAttr " + $plug + "`"
         + " \"" + $checkBox + "\";");
    checkBox -e
        -changeCommand ("setAttr " + $plug
                + " `checkBox -q -value \"" + $checkBox + "\"`;"
                + $changeCommand)
        $checkBox;
}

global proc houdiniAssetAdjustMulti(
        string $parent,
        string $nodeName,
        string $attr,
        string $fullAttr
        )
{
    setParent $parent;

    setUITemplate -pushTemplate attributeEditorTemplate;

    string $fullAttrName = $nodeName + "." + $fullAttr;

    int $curMultiSize = (`layout -q -numberOfChildren $parent` - 1);
    int $multiSize = `getAttr ($fullAttrName + "__multiSize")`;

    if(`attributeQuery -node $nodeName -exists $attr`)
    {
        string $children[] = `attributeQuery -node $nodeName -listChildren $attr`;
        //TODO: child attributes aren't created when the size is 0

        for($i = $curMultiSize; $i < $multiSize; $i++)
        {
            // Wrap UI for each instance under one layout so that we have a known
            // number of children.
            columnLayout
                -adjustableColumn true;

            separator;

            text
                -align "left"
                -label $i;

            string $elementAttr = $fullAttr + "[" + $i + "]";

            buildAttrTree($nodeName, $attr, $elementAttr);

            setParent ..;
        }
    }

    string $layoutChildArray[] = `layout -q -childArray $parent`;
    for($i = $curMultiSize; $i-- > $multiSize;)
    {
        deleteUI $layoutChildArray[$i + 1];
    }

    setUITemplate -popTemplate;
}

proc int isSupportedInput(string $object)
{
    string $supportedTypes[] = {
        "hairSystem",
        "houdiniAsset",
        "houdiniCurveMeshInput",
        "mesh",
        "nurbsCurve",
        "particle"
    };

    for($supportedType in $supportedTypes)
    {
        if(`objectType -isAType $supportedType $object`)
        {
            return 1;
        }
    }

    return 0;
}

proc string[] getValidAssetInputs(string $objects[])
{
    int $validInputsCount = 0;
    string $validAssetInputs[];

    for($object in $objects)
    {
        int $found = 0;

        // check if the object is a supported node
        if(!$found)
        {
            if(isSupportedInput($object))
            {
                $validAssetInputs[$validInputsCount++] = $object;
                $found = 1;
            }
        }

        // check if there are any supported nodes in immediate children
        if(!$found)
        {
            string $tempObjects[] = `listRelatives
                -fullPath
                -shapes
                -noIntermediate
                $object`;
            for($tempObject in $tempObjects)
            {
                if(isSupportedInput($tempObject))
                {
                    $validAssetInputs[$validInputsCount++] = $tempObject;
                    $found = 1;
                }
            }
        }
    }

    return $validAssetInputs;
}

proc clearInput(string $inputAttr)
{
    string $inputTransformAttr = $inputAttr + ".inputTransform";
    string $inputGeoAttr = $inputAttr + ".inputGeo";

    // remove input if cleared
    string $inPlug = `connectionInfo -sfd $inputGeoAttr`;
    string $inTransformPlug = `connectionInfo -sfd $inputTransformAttr`;
    if($inPlug != "")
    {
        disconnectAttr $inPlug $inputGeoAttr;
        disconnectAttr $inTransformPlug $inputTransformAttr;
        //string $inMesh = plugNode($inPlug);
        //showHidden $inMesh;
    }
}

proc setInput(string $inputAttr, string $object)
{
    string $nodeName = plugNode($inputAttr);

    string $inputTransformAttr = $inputAttr + ".inputTransform";
    string $inputGeoAttr = $inputAttr + ".inputGeo";

    if(`objectType -isAType "houdiniAsset" $object`)
    {
        // if we just got the houdiniAsset, just assume the first output
        connectAttr -force
            ($object + ".output.outputObjects[0].outputObjectMetaData")
            $inputGeoAttr;
                
        connectAttr -force ($object + ".worldMatrix") $inputTransformAttr;

        houdiniEngine_syncAssetOutput $nodeName;
    }
    else if(`objectType -isAType "mesh" $object`)
    {
        string $histPlug = `connectionInfo -sfd ($object + ".inMesh")`;
        string $histNode = plugNode($histPlug);

        if($histNode != ""
                && `nodeType $histNode` == "houdiniAsset")
        {
            // TODO: Assume that assets with inputs are SOPs
            // *** A bit of a hack, plugNode just takes a substring of
            // everything before the first '.', even if the substring is
            // not a node.
            string $obj = plugNode(plugAttr($histPlug));

            connectAttr -force
                ($histNode + "." + $obj + ".outputObjectMetaData")
                $inputGeoAttr;

            connectAttr -force ($histNode + ".worldMatrix") $inputTransformAttr;
        }
        else
        {
            connectAttr -force ($object + ".outMesh") $inputGeoAttr;
            string $parent[] = `listRelatives -fullPath -parent $object`;
            if(size($parent) > 0 && `nodeType $parent[0]` == "transform")
            {
                string $parentWorldMatrixPlug = $parent[0] + ".worldMatrix";
                connectAttr -force $parentWorldMatrixPlug $inputTransformAttr;
            }
        }

        houdiniEngine_syncAssetOutput $nodeName;
    }
    else if(`objectType -isAType "nurbsCurve" $object`)
    {
        connectAttr -force ($object + ".local") $inputGeoAttr;
        string $parent[] = `listRelatives -fullPath -parent $object`;
        if(size($parent) > 0 && `nodeType $parent[0]` == "transform")
        {
            string $parentWorldMatrixPlug = $parent[0] + ".worldMatrix";
            connectAttr -force $parentWorldMatrixPlug $inputTransformAttr;
        }

        houdiniEngine_syncAssetOutput $nodeName;
    }
    else if(`objectType -isAType "particle" $object`)
    {
        connectAttr -force ($object + ".position") $inputGeoAttr;
        string $parent[] = `listRelatives -fullPath -parent $object`;
        if(size($parent) > 0 && `nodeType $parent[0]` == "transform")
        {
            string $parentWorldMatrixPlug = $parent[0] + ".worldMatrix";
            connectAttr -force $parentWorldMatrixPlug $inputTransformAttr;
        }

        houdiniEngine_syncAssetOutput $nodeName;
    }
    else if(`objectType -isAType "hairSystem" $object`)
    {
        string $path[];
        int $pathLen = `tokenize $object "|" $path`;
        string $inputNode = $path[$pathLen - 1] + "_HoudiniInput";
        $inputNode = `createNode "houdiniCurveMeshInput" -name $inputNode`;
        
        string $outputHairs[] = `listAttr -multi ($object + ".outputHair")`;
        
        int $iInput = 0;
        for ($outputHair in $outputHairs)
        {
            string $follicleShapes[] =
                `listConnections ($object + "." + $outputHair)`;
                
            for ($follicleShape in $follicleShapes)
            {
                string $inputPlug =
                    `format -s $inputNode -s $iInput "^1s.inputCurves[^2s]"`;
                     
                connectAttr ($follicleShape + ".outCurve") $inputPlug;                
            }
            
            $iInput += 1;
        }        

        connectAttr -force
            ($inputNode + ".outputObjectMetaData")
            $inputGeoAttr;

        houdiniEngine_syncAssetOutput $nodeName;        
    }
    else
    {
        error("Cannot handle object:" + $object + "\n");
    }
}

global proc
AEhoudiniAssetOperationNew(string $attr)
{
    setUITemplate -pushTemplate NONE;

    rowLayout
        -adjustableColumn 1
        -numberOfColumns 1;

        button -label "Sync Asset"
            -annotation "Recreates all the parameters and output nodes."
            syncButton;

    setParent ..;

    setUITemplate -popTemplate;

    AEhoudiniAssetOperationReplace $attr;
}

global proc
AEhoudiniAssetOperationReplace(string $attr)
{
    string $nodeName = plugNode($attr);

    button -e
        -c ("houdiniEngine_syncAsset " + $nodeName)
        syncButton;
}

global proc AEhoudiniAssetSetInputToSelection(string $inputAttr)
{
    string $validInputs[];

    string $selection[] = `ls -selection`;

    // make sure we don't include the houdiniAsset node itself if it's selected last
    if(size($selection))
    {
        int $lastSelectionIndex = size($selection) - 1;
        if(plugNode($inputAttr) == $selection[$lastSelectionIndex])
        {
            stringArrayRemoveAtIndex($lastSelectionIndex, $selection);
        }
    }

    if(size($selection) == 0)
    {
        clearInput($inputAttr);
        return;
    }
    else if(size($selection) > 1)
    {
        error("Please select exactly one object to be used for input.");
    }

    $validInputs = getValidAssetInputs($selection);
    if(size($validInputs) > 1)
    {
        error("Selection contains multiple supported objects. Please select exactly one object to be used for input.");
    }
    else if(size($validInputs) == 0)
    {
        error("Selection has no supported object that can be used for input.");
    }

    setInput($inputAttr, $validInputs[0]);
}

global proc AEhoudiniAssetSetInputToText(string $textField, string $inputAttr)
{
    string $validInputs[];

    string $str = `textField -q -text $textField`;
    if($str == "")
    {
        clearInput($inputAttr);
        return;
    }
    else if(!`objExists $str`)
    {
        error("Entered object doesn't exist.");
    }

    $validInputs = getValidAssetInputs({$str});
    if(size($validInputs) > 1)
    {
        error("Entered object contains multiple supported objects. Please enter the exact object to be used for input.");
    }
    else if(size($validInputs) == 0)
    {
        error("Entered object has no supported object that can be used for input.");
    }

    setInput($inputAttr, $validInputs[0]);
}

global proc AEhoudiniAssetInputsNew(string $inputsAttribute)
{
    columnLayout -adj true "inputsLayout";
    setParent ..;

    AEhoudiniAssetInputsReplace $inputsAttribute;
}

global proc AEhoudiniAssetInputsReplace(string $inputsAttribute)
{
    string $parent = `setParent -q`;
    string $inputsLayoutFull = $parent + "|inputsLayout";

    if(`layout -q -numberOfChildren $inputsLayoutFull`)
    {
        for($child in `layout -q -childArray $inputsLayoutFull`)
        {
            deleteUI ($inputsLayoutFull + "|" + $child);
        }
    }

    setParent $inputsLayoutFull;

    int $multiIndices[] = `getAttr -multiIndices $inputsAttribute`;
    for($i=0; $i < size($multiIndices); $i++)
    {
        int $index = $multiIndices[$i];
        string $inputAttribute = $inputsAttribute + "[" + $index + "]";

        string $inputName = `getAttr ($inputAttribute + ".inputName")`;
        text -align left -label $inputName;

        string $inputLayout = "input" + ($index + 1) + "Layout";
        string $inputLayoutFull = $inputsLayoutFull + "|" + $inputLayout;
        rowLayout
            -numberOfColumns 2
            -adjustableColumn 1
            -columnAlign  1 "right"
            -columnAttach 1 "both"     2
            -columnAttach 2 "left"  2
            $inputLayout;

            string $inputTextFieldFull = ($inputLayoutFull + "|inputTextField");
            textField
                -alwaysInvokeEnterCommandOnReturn true
                -enterCommand ("AEhoudiniAssetSetInputToText \"" + $inputTextFieldFull + "\" \""
                 + $inputAttribute + "\"")
                "inputTextField";
            button
                -label "Set to Selection"
                -command ("AEhoudiniAssetSetInputToSelection \"" + $inputAttribute + "\"");

        setParent ..;

        scriptJob
            -parent $inputLayoutFull
            -replacePrevious
            -attributeChange ($inputAttribute + ".inputGeo")
            ("AEhoudiniAssetUpdateInput \"" + $inputLayoutFull + "\" \"" + $inputAttribute + "\"");

        scriptJob
            -parent $inputLayoutFull
            -replacePrevious
            -attributeChange ($inputAttribute + ".inputTransform")
            ("AEhoudiniAssetUpdateInput \"" + $inputLayoutFull + "\" \"" + $inputAttribute + "\"");

        AEhoudiniAssetUpdateInput $inputLayoutFull $inputAttribute;

        if($i < size($multiIndices) - 1)
        {
            separator;
        }
    }

    setParent ..;
}

global proc AEhoudiniAssetUpdateInput(string $inputLayout, string $inputAttribute)
{
    string $inputTextField = $inputLayout + "|inputTextField";

    // set the appropriate text
    string $connectedMeshAttr = `connectionInfo -sourceFromDestination ($inputAttribute + ".inputGeo")`;
    string $connectedMesh = plugNode($connectedMeshAttr);
    textField -edit -text $connectedMesh $inputTextField;
}

global proc AEhoudiniAssetParmNew(string $houdiniAssetParmAttribute)
{
    columnLayout -adjustableColumn 1 "parmLayout";
    setParent ..;

    AEhoudiniAssetParmReplace $houdiniAssetParmAttribute;
}

global proc AEhoudiniAssetParmReplace(string $houdiniAssetParmAttribute)
{
    string $parent = `setParent -q`;
    string $parmLayoutFull = $parent + "|parmLayout";

    if(`layout -q -numberOfChildren $parmLayoutFull`)
    {
        for($child in `layout -q -childArray $parmLayoutFull`)
        {
            deleteUI ($parmLayoutFull + "|" + $child);
        }
    }

    setParent $parmLayoutFull;

    string $nodeName = plugNode($houdiniAssetParmAttribute);
    string $attrName = plugAttr($houdiniAssetParmAttribute);

    if(`attributeQuery -node $nodeName -exists $attrName`)
    {
        buildAttrTree($nodeName, $attrName, $attrName);
    }
}

global proc AEhoudiniAssetShowCookMessages(string $nodeName)
{
    string $cookMessages = `houdiniAsset -cookMessages $nodeName`;

    string $window = "houdiniAssetShowCookMessages";
    if(`window -exists $window`)
    {
        deleteUI -window $window;
    }

    window
        -title ($nodeName + ": Cook Messages")
        $window;
    string $formLayout = `formLayout`;
    string $cookMessagesField = `scrollField -editable false -text $cookMessages`;
    string $closeButton = `button
        -label "Close"
        -command ("deleteUI -window " + $window)`;

    formLayout -e
        -attachForm $cookMessagesField "top" 0
        -attachForm $cookMessagesField "left" 0
        -attachForm $cookMessagesField "right" 0
        -attachControl $cookMessagesField "bottom" 0 $closeButton

        -attachNone $closeButton "top"
        -attachForm $closeButton "left" 0
        -attachForm $closeButton "right" 0
        -attachForm $closeButton "bottom" 0

        $formLayout;

    showWindow $window;
}

global proc AEhoudiniAssetOptionsNew(string $attr)
{
    global int $gAttributeEditorTemplateLabelWidth;

    columnLayout
        -adjustableColumn true
        optionsLayout;

    columnLayout
        -columnAttach "left" $gAttributeEditorTemplateLabelWidth
        buttonLayout;

        button -label "Show Cook Messages"
            -annotation "Show the cook messages that were generated from the cook."
            showCookMessagesButton;

        button -label "Reset Simulation"
            -annotation "Resets all the simulation caches."
            resetSimulationButton;

        button -label "Reload Asset"
            -annotation "Reloads this asset to use the updated asset definition."
            reloadAssetButton;

    setParent ..;

    separator;

    columnLayout
        -columnAttach "left" $gAttributeEditorTemplateLabelWidth
        syncLayout;

        createAttrCheckBox("autoSyncOutputs", "Auto Sync Outputs",
                "Attemps to automatically sync the output nodes when necessary.");

        button -label "Sync Asset"
            -annotation "Recreates all the parameters and output nodes."
            syncButton;

    setParent ..;

    separator;

    columnLayout
        -columnAttach "left" $gAttributeEditorTemplateLabelWidth
        outputLayout;

        // Don't use attrControlGrp here, and manually create our own checkBox.
        // For some reasons, Maya will trigger attrControlGrp's changeCommand
        // at the end of a playback.
        createAttrCheckBox("splitGeosByGroup", "Split Geos By Group",
                "Split geos by group.");

        createAttrCheckBox("useInstancerNode", "Use Instancer Node",
                "Use particle instancer node to output instances.");

        createAttrCheckBox("outputHiddenObjects", "Output Hidden Objects",
                "Output hidden objects.");

        createAttrCheckBox(
                "outputTemplatedGeometries",
                "Output Templated Geometries",
                "Output templated geometries."
                );

    setParent ..;

    setParent ..;

    AEhoudiniAssetOptionsReplace $attr;
}

global proc AEhoudiniAssetOptionsReplace(string $attr)
{
    string $nodeName = plugNode($attr);

    string $parent = `setParent -q`;
    string $optionsLayoutFull = $parent + "|optionsLayout";

    // buttonLayout
    button -e
        -c ("AEhoudiniAssetShowCookMessages " + $nodeName)
        ($optionsLayoutFull + "|buttonLayout|showCookMessagesButton");
    button -e
        -c ("houdiniAsset -resetSimulation " + $nodeName)
        ($optionsLayoutFull + "|buttonLayout|resetSimulationButton");
    button -e
        -c ("houdiniAsset -reloadAsset " + $nodeName)
        ($optionsLayoutFull + "|buttonLayout|reloadAssetButton");

    // syncLayout
    replaceAttrCheckBox($optionsLayoutFull + "|syncLayout|autoSyncOutputs",
            $nodeName + ".autoSyncOutputs",
            "houdiniEngine_syncAssetOutput \"" + $nodeName + "\";");
    button -e
        -c ("houdiniEngine_syncAsset " + $nodeName)
        ($optionsLayoutFull + "|syncLayout|syncButton");

    // outputLayout
    replaceAttrCheckBox($optionsLayoutFull + "|outputLayout|splitGeosByGroup",
            $nodeName + ".splitGeosByGroup",
            "houdiniEngine_syncAssetOutput \"" + $nodeName + "\";");
    replaceAttrCheckBox($optionsLayoutFull + "|outputLayout|useInstancerNode",
            $nodeName + ".useInstancerNode",
            "houdiniEngine_syncAssetOutput \"" + $nodeName + "\";");
    replaceAttrCheckBox($optionsLayoutFull + "|outputLayout|outputHiddenObjects",
            $nodeName + ".outputHiddenObjects",
            "houdiniEngine_syncAssetOutput \"" + $nodeName + "\";");
    replaceAttrCheckBox(
            $optionsLayoutFull + "|outputLayout|outputTemplatedGeometries",
            $nodeName + ".outputTemplatedGeometries",
            "houdiniEngine_syncAssetOutput \"" + $nodeName + "\";");
}

global proc AEhoudiniAssetTemplate(string $nodeName)
{
    editorTemplate -beginScrollLayout;

    editorTemplate -callCustom "AEhoudiniAssetOperationNew" "AEhoudiniAssetOperationReplace"
        "unused";

    // special ui for inputs
    string $inputAttrArray[] = `listAttr -st "input" $nodeName`;
    string $inputAttr = $inputAttrArray[0];
    if($inputAttr != "")
    {
        editorTemplate -beginLayout "Inputs" -collapse false;

            editorTemplate -callCustom "AEhoudiniAssetInputsNew" "AEhoudiniAssetInputsReplace"
                $inputAttr;

        editorTemplate -endLayout;
    }

    editorTemplate -callCustom "AEhoudiniAssetParmNew" "AEhoudiniAssetParmReplace" "houdiniAssetParm";

    editorTemplate -beginLayout "Asset Information" -collapse false;

        editorTemplate
            -label "Asset Type"
            -addControl "assetName";
        editorTemplate
            -label "File Path"
            -addControl "otlFilePath";

    editorTemplate -endLayout;

    editorTemplate -beginLayout "Asset Options" -collapse false;

        editorTemplate -callCustom "AEhoudiniAssetOptionsNew" "AEhoudiniAssetOptionsReplace" "unused";

        editorTemplate -suppress "autoSyncOutputs";
        editorTemplate -suppress "splitGeosByGroup";
        editorTemplate -suppress "useInstancerNode";
        editorTemplate -suppress "outputHiddenObjects";
        editorTemplate -suppress "outputTemplatedGeometries";

    editorTemplate -endLayout;

    editorTemplate -beginLayout "Maya Transform Attributes";

        AEtransformMain $nodeName;
        AEtransformNoScroll $nodeName;

    editorTemplate -endLayout;

    editorTemplate -addExtraControls;

    editorTemplate -endLayout;
}

