
proc buildAttrTree(string $nodeName, string $attr)
{
    if ($attr == "input")
        return;

    string $fullAttrName = $nodeName + "." + $attr;
    string $type = `getAttr -type $fullAttrName`;
    string $children[] = `attributeQuery -n $nodeName -lc $attr`;
    string $niceName = `attributeQuery -n $nodeName -nn $attr`;


    if ("TdataCompound" != $type)
    {
        if ("Separator" == $niceName)
        {
            editorTemplate -addSeparator;
        } else
        {
            editorTemplate -addDynamicControl $attr;
        }
        return;
    }

    editorTemplate -beginLayout $niceName -collapse true;
    for ($i=0; $i<size($children); $i++)
    {
        string $child = $children[$i];
        buildAttrTree($nodeName, $child);
    }
    editorTemplate -endLayout;
}


global proc AEhAssetSetInputToSelection(string $textField, string $inputAttr)
{
    //print ("arg: " + $arg + "\n");
    string $buf[] = `ls -sl`;

    if (size($buf) == 1)
    {
        if (`objExists $buf[0]` && `nodeType $buf[0]` == "mesh")
        {
            AEhAssetSetInput($textField, $inputAttr, $buf[0]);
            return;
        }
    }

    string $buf2[] = `listRelatives -ad $buf`;
    string $sel[] = `ls -typ mesh $buf2`;
    string $meshes[] = `ls -sl -typ mesh`;
    //appendStringArray
    if (size($sel) == 1)
        AEhAssetSetInput($textField, $inputAttr, $sel[0]);
}


global proc AEhAssetSetInputToText(string $textField, string $inputAttr)
{
    print "pressed enter\n";
    string $str = `textField -q -text $textField`;

    if (!`objExists $str`)
    {
        AEhAssetSetInput($textField, $inputAttr, $str);
        return;
    }

    if (`nodeType $str` == "mesh")
    {
        AEhAssetSetInput($textField, $inputAttr, $str);
        return;
    }

    string $buf2[] = `listRelatives -ad $str`;
    string $sel[] = `ls -typ mesh $buf2`;
    if (size($sel) == 1)
    {
        AEhAssetSetInput($textField, $inputAttr, $sel[0]);
        return;
    }

    
}


global proc AEhAssetSetInput(string $textField, string $inputAttr, string $str)
{
    if ($str == "")
    {
        // remove input if cleared
        string $inPlug = `connectionInfo -sfd $inputAttr`;
        if ($inPlug != "")
        {
            disconnectAttr $inPlug $inputAttr;
            string $inMesh = plugNode($inPlug);
            //showHidden $inMesh;
        }
    } else
    {
        // connect new input
        if (`objExists $str`)
        {
            string $histPlug = `connectionInfo -sfd ($str + ".inMesh")`;
            string $histNode = plugNode($histPlug);
            string $assetNode = plugNode($inputAttr);
            if ($histNode != "")
            {
                // TODO: Assume that assets with inputs are SOPs, and that
                // Only one object output from SOP assets
                if (`nodeType $histNode` == "hAsset")
                {
                    // *** A bit of a hack, plugNode just takes a substring of 
                    // everything before the first '.', even if the substring is
                    // not a node.
                    string $obj = plugNode(plugAttr($histPlug));
                    connectAttr -force ($histNode + "." + $obj + ".md") $inputAttr;
                }
                else
                {
                print "setinput\n";
                    connectAttr -force $histPlug $inputAttr;
                    //hide $str;
                }
                string $dest[] = `connectionInfo -dfs ($assetNode + ".objects[0].mesh")`;
                if (size($dest) == 0)
                    connectAttr -force ($assetNode + ".objects[0].mesh") ($str + ".inMesh");
            }
        }
    }

    // set the appropriate text
    string $connectedMeshAttr = `connectionInfo -sfd $inputAttr`;
    string $connectedMesh = plugNode($connectedMeshAttr);
    textField -edit -text $connectedMesh $textField;
}


global proc AEhAssetInputsNew(string $attrFullName)
{
    //$inputButtons = {};

    string $buffer[];
    tokenize($attrFullName, ".", $buffer);
    string $nodeName = $buffer[0];
    string $attrName = $buffer[1];

    string $children[] = `attributeQuery -n $nodeName -lc $attrName`;

    //editorTemplate -beginLayout "Inputs" -collapse false;
    columnLayout -adj true "inputsLayout";
    for ($i=0; $i<size($children); $i++)
    {
        string $child = $children[$i];
        string $niceName = `attributeQuery -n $nodeName -nn $child`;

        rowLayout -numberOfColumns 3
            -columnWidth3 50 150 50
            -adjustableColumn 2
            -parent "inputsLayout"
            -columnAlign  1 "right"
            -columnAttach 1 "both"     2
            -columnAttach 2 "both"  2
            -columnAttach 3 "left"  2;
            text -label $niceName;
            string $inputTextField = `textField -aie true`;
            AEhAssetSetInput $inputTextField ($nodeName + "." + $child) " ";
            textField -edit -enterCommand
                ("AEhAssetSetInputToText \"" + $inputTextField + "\" \"" 
                + ($nodeName + "." + $child) + "\"") $inputTextField;
            button -label "Set to Selection" 
                -c ("AEhAssetSetInputToSelection \"" + $inputTextField + "\" \"" 
                + ($nodeName + "." + $child) + "\"");
    }

    //editorTemplate -endLayout;

}


global proc AEhAssetInputsReplace(string $attrFullName)
{
    deleteUI "inputsLayout";
    AEhAssetInputsNew($attrFullName);
}


global proc AEhAssetTemplate( string $nodeName )
{
    editorTemplate -addControl "fileName";
    editorTemplate -addControl "dummyMesh";
    //Put our attributes into a scrolled layout field
    editorTemplate -beginScrollLayout;

    // special ui for inputs
    string $inputAttrArray[] = `listAttr -st "inputs" $nodeName`;
    string $inputAttr = $inputAttrArray[0];
    if ($inputAttr != "")
    {
        editorTemplate -beginLayout "Inputs" -collapse false;
        editorTemplate -callCustom "AEhAssetInputsNew" "AEhAssetInputsReplace"
            $inputAttr;
        //int $size = `getAttr -size ($nodeName + "." + $inputAttr)`;
        
        //for ($i=0; $i<$size; $i++)
        //{
            //editorTemplate -callCustom "AEhAssetInputsNew" "AEhAssetInputsReplace"
                //($inputAttr + ($i+1));
        //}
        editorTemplate -endLayout;
    }


    // get list of attributes
    string $attrs[] = `listAttr -ud $nodeName`;

    for ($i=0; $i<size($attrs); $i++)
    {
        string $attr = $attrs[$i];
        string $parents[] = `attributeQuery -n $nodeName -lp $attr`;
        if ((0 == size($parents)) && $attr != "inputs")
        {
            buildAttrTree($nodeName, $attr);
        }
        editorTemplate -suppress $attr;
    }

    editorTemplate -endLayout;

    editorTemplate -suppress "caching";
    editorTemplate -suppress "nodeState";


    //editorTemplate -endScrollLayout;


}

